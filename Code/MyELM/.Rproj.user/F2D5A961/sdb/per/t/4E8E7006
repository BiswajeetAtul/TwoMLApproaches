{
    "collab_server" : "",
    "contents" : "rm(list = ls())\nstrt=Sys.time()\nrequire(caret)\nrequire(MASS)\nrequire(quantmod) #for Lag\nrequire(class)\n#Read the dataset into the workspace\ntrain_data=read.csv(\"C:/Users/USER.000/Desktop/B Tech project/new_testdata.csv\",header=T)\ntrain_data_date=read.csv(\"C:/Users/USER.000/Desktop/B Tech project/test_data.csv\",header=T)\n\n#Normalisation\ntraindata=(train_data$windspd-min(train_data$windspd))/(max(train_data$windspd)-min(train_data$windspd))\n\ndataset <- data.frame(traindata, x1=Lag(traindata), x2=Lag(traindata,2),x3=Lag(traindata,3),x4=Lag(traindata,4))\nnames(traindata) <- c(\"windspd\", \"x1\", \"x2\",\"x3\",\"x4\")\ndataset=dataset[5:nrow(dataset),]\n\n#Spliting the dataset into training and testing dataset\ndt=seq(1,round(nrow(dataset)*0.8),1)\ntraindata<-dataset[dt,]\ntestdata<-dataset[-dt,]\n\n\nhidden<-10\n\nx<-2:5\ny<-1\nN <- nrow(traindata)\nX <- unname(data.matrix(traindata[,x]))\nY <- traindata[,y]\n\n# number of input features\nD <- ncol(X)\nK <- 1\nH <-  hidden\n\n#####################################################\n# create the weight matrix frim input to hidden\nW1 <- 0.01*matrix(runif(D*H), nrow=D, ncol=H)\n\n#b1 <- matrix(rnorm(H), nrow=1, ncol=H)\n\n###########################################################\n\nA=X%*%W1\nA=1/(1+exp(-A))\n\nY=as.matrix(Y)\nW2=ginv(A)%*%Y\nY.out=A%*%W2\n\n###########################################################\n#Plot\nplot(Y,type=\"l\",xlim= c(0,nrow(traindata)),ylim=c(0,1),col=\"black\",lwd=1,xlab=\"Hours\",ylab=\"Normalised Windspeed\",main=\"ELM\")\npar(new=TRUE)\nplot(Y.out,type=\"l\",xlim= c(0,nrow(traindata)),ylim=c(0,1),lwd=1,col=\"red\",xlab=\"Hours\",ylab=\"Normalised Windspeed\",main=\"ELM\")\nlegend(500,0.9,legend = c(\"Target\",\"Actual\"),col=c(\"black\",\"red\"),lwd=2,lty=1:1,cex=0.8)\n\n\n##########################################################\n#Error calculation\nerr=Y-Y.out\nerr=err*err\nmse=mean(err)\n\n##########################################################\n#Testing\nM <- nrow(testdata)\nX.test <- unname(data.matrix(testdata[,x]))\nY.test <- testdata[,y]\nY.test <- as.matrix(Y.test)\n\nZ.out=X.test%*%W1\nZ.out=1/(1+exp(-Z.out))\n\nY.test.out=Z.out%*%W2\n\n\n##########################################################\n#plot\nplot(Y.test[1:nrow(Y.test)],type=\"l\",xlim= c(0,M),ylim=c(0,1),col=\"black\",lwd=2,xlab=\"Time(Hours)\",ylab=\"Normalised Windspeed\",main=\"ELM\")\npar(new=TRUE)\nplot(Y.test.out[2:length(Y.test.out)],type=\"l\",xlim= c(0,M),ylim=c(0,1),lwd=2,col=\"red\",xlab=\"Time(Hours)\",ylab=\"Normalised Windspeed\",main=\"ELM\")\nlegend(196,1,legend = c(\"Target\",\"Predicted\"),col=c(\"black\",\"red\"),lwd=2,lty=1:1,cex=0.8)\n\n\nerr=Y.test-Y.test.out\nerr1=err*err\nsqrt(mean(err1))\n\n\n###################################################################\n#Nearest Neighbor\nd=as.numeric()\ns=as.numeric()\ntestdata1=data.frame(Y.test.out,testdata[1:nrow(testdata),2:5])\n\nknn=get.knnx(testdata1, traindata, k=1, algo=\"kd_tree\")\nsort2=sort(knn$nn.index,index.return=T)\nsort2$ix[1]\ndist=knn$nn.dist[sort2$ix[1]]\n\n#Prediction Interval\nY.t.lower=Y.test.out-dist\nY.t.upper=Y.test.out+dist\n###############################################################\n#PICP\nN=nrow(Y.test)\na=0\nfor (i in 1:(N-1)) \n{\n  if(Y.test[i]>=Y.t.lower[i+1] && Y.test[i]<=Y.t.upper[i+1])\n    c=1\n  else\n    c=0\n  \n  a=a+c\n}\n#PICP\npicp=a/(N-1)\n\n\n#NMPIW\na=0\nfor(i in 1:N-1)\n{\n  a=a+(Y.t.upper[i+1] - Y.t.lower[i+1])\n}\nnmpiw=a/(N-1)\n\n###############################################################\n#Plot\nplot(Y.t.lower[2:length(Y.t.lower)],type=\"l\",xlim= c(0,M),ylim=c(0,1),col=\"blue\",lwd=2,xlab=\"Hours\",ylab=\"Normalised Windspeed\",main=\"ELM\")\npar(new=TRUE)\nplot(Y.t.upper[2:length(Y.t.lower)],type=\"l\",xlim= c(0,M),ylim=c(0,1),lwd=2,col=\"blue\",xlab=\"Hours\",ylab=\"Normalised Windspeed\",main=\"ELM\")\npar(new=TRUE)\nplot(Y.test,type=\"l\",xlim= c(0,M),ylim=c(0,1),lwd=2,col=\"red\",xlab=\"Hours\",ylab=\"Normalised Windspeed\",main=\"ELM\")\n\n###############################################################\n#denormalisation\n\ndatatest1=(Y.test*((max(train_data$windspd)-min(train_data$windspd))))+min(train_data$windspd)\ndatatest.l=(Y.t.lower*((max(train_data$windspd)-min(train_data$windspd))))+min(train_data$windspd)\ndatatest.u=(Y.t.upper*((max(train_data$windspd)-min(train_data$windspd))))+min(train_data$windspd)\n\n#Plot\nplot(datatest.l[2:length(datatest.l)],type=\"l\",xlim= c(0,M),ylim=c(0,40),lwd=2,lty=1,col=\"green\",xlab=\"Time(Hours)\",ylab=\"Windspeed(Km/h)\",main=\"ELM-Nearest Neighbour\")\npar(new=TRUE)\nplot(datatest.u[2:length(datatest.u)],type=\"l\",xlim= c(0,M),ylim=c(0,40),lwd=2,lty=1,col=\"blue\",xlab=\"Time(Hours)\",ylab=\"Windspeed(Km/h)\")\npar(new=TRUE)\nplot(datatest1,type=\"l\",xlim= c(0,M),ylim=c(0,40),lwd=2,col=\"red\",xlab=\"Time(Hours)\",ylab=\"Windspeed(Km/h)\")\nv=seq(0,271,24)\nh=seq(0,60,10)\nabline(v=v,lty=3)\nlegend(196,40,legend = c(\"Target\",\"ELM-UB\",\"ELM-LB\"),col=c(\"red\",\"blue\",\"green\"),lwd=2,lty=1:1,cex=0.8)\n\nend=Sys.time()\nend-strt",
    "created" : 1489136048370.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2433385186",
    "id" : "4E8E7006",
    "lastKnownWriteTime" : 1491495088,
    "last_content_update" : 1491495088422,
    "path" : "C:/Users/USER.000/Desktop/B Tech project/Project using R/MyELM/new ELM.R",
    "project_path" : "new ELM.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}