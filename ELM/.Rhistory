library(confReg)
#rm(list=ls)
library(elmNN)
library(ELMR)
library(quantmod) #for Lag
library(confReg)
library(e1071)
set.seed(1234)
data.1.a<- read.csv("D:/BTECHPROJECT/projectdataset/testing.csv",header=T);
###################################################
#(processed_data<-preProcess(data))
#class(data)
#preprocessing the data:
#data.1.b<-data.frame(data.1.a$windspd)
#data.1.c<-preProcess(data.1.b)
#data.1.d<-data.frame(data.1.c, x1=Lag(data.1.c,1), x2=Lag(data.1.c,2))
#(data.1.d)
####################################################
#data.2.a<-list()
#normalizing the data
max=max(data.1.a$windspd)
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(now=data.2.a, x1=Lag(data.2.a,1), x2=Lag(data.2.a,2))
#--------------------applying the ELM----------------------
#--------------------creating the elm model----------------
Elm_MOdel<-elmtrain(normalized_data$now~normalized_data$Lag.1+normalized_data$Lag.2,data=normalized_data, nhid = 10, actfun = "sig")
Elm_Pred<-predict(Elm_MOdel,newdata =normalized_data[3,c(2,3)])
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800) )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800) )
Prediction_Mean<-mean(Elm_Pred)
Prediction_STD.Deviation<-sd(Elm_Pred)
Prediction_Size<-length(Elm_Pred)
Prediction_Error<-qt(0.95,df=Prediction_Size-1)*Prediction_STD.Deviation/sqrt(Prediction_Size)
left<-Prediction_Mean- Prediction_Error
right<-Prediction_Mean+ Prediction_Error
prediction_intervals<-data.frame(upper=Elm_Pred+Prediction_Error,val=Elm_Pred,lower=Elm_Pred- Prediction_Error)
prediction_intervals
plot( data.2.a, type="l", col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
plot(prediction_intervals$lower, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
plot( data.2.a, type="l", col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#
library("e1071", lib.loc="~/R/win-library/3.3")
library("confReg", lib.loc="~/R/win-library/3.3")
set.seed(100)
dataMatrix<-matrix(runif(10*200),200,10)
rm(list=ls())
set.seed(100)
dataMatrix<-matrix(runif(10*200),200,10)
dataMatrix
?matrix
y <- (10 * sin(pi * dataMatrix[, 1] * dataMatrix[, 2]) + 20 *(dataMatrix[, 3] - 0.5)^2 + 10 * dataMatrix[, 4] + 5 * dataMatrix[,5]) +rnorm(200, 0, 0.1)
y
dataMatrix[,1]
dataMatrix[,2]
#rm(list=ls)
library(elmNN)
library(ELMR)
library(quantmod) #for Lag
library(confReg)
library(e1071)
set.seed(1234)
data.1.a<- read.csv("D:/BTECHPROJECT/projectdataset/testing.csv",header=T);
###################################################
#(processed_data<-preProcess(data))
#class(data)
#preprocessing the data:
#data.1.b<-data.frame(data.1.a$windspd)
#data.1.c<-preProcess(data.1.b)
#data.1.d<-data.frame(data.1.c, x1=Lag(data.1.c,1), x2=Lag(data.1.c,2))
#(data.1.d)
####################################################
#data.2.a<-list()
#normalizing the data
max=max(data.1.a$windspd)
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(now=data.2.a, x1=Lag(data.2.a,1), x2=Lag(data.2.a,2))
#--------------------applying the ELM----------------------
#--------------------creating the elm model----------------
Elm_MOdel<-elmtrain(normalized_data$now~normalized_data$Lag.1+normalized_data$Lag.2,data=normalized_data, nhid = 10, actfun = "sig")
Elm_Pred<-predict(Elm_MOdel,newdata =normalized_data[3,c(2,3)])
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800) )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800) )
Prediction_Mean<-mean(Elm_Pred)
Prediction_STD.Deviation<-sd(Elm_Pred)
Prediction_Size<-length(Elm_Pred)
Prediction_Error<-qt(0.95,df=Prediction_Size-1)*Prediction_STD.Deviation/sqrt(Prediction_Size)
left<-Prediction_Mean- Prediction_Error
right<-Prediction_Mean+ Prediction_Error
prediction_intervals<-data.frame(upper=Elm_Pred+Prediction_Error,val=Elm_Pred,lower=Elm_Pred- Prediction_Error)
prediction_intervals
plot( data.2.a, type="l", col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$lower, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
View(normalized_data)
View(normalized_data)
normalized_data<-normalized_data(-c(1,2))
normalized_data<-normalized_data[-c(1,2)]
###################################################
#(processed_data<-preProcess(data))
#class(data)
#preprocessing the data:
#data.1.b<-data.frame(data.1.a$windspd)
#data.1.c<-preProcess(data.1.b)
#data.1.d<-data.frame(data.1.c, x1=Lag(data.1.c,1), x2=Lag(data.1.c,2))
#(data.1.d)
####################################################
#data.2.a<-list()
#normalizing the data
max=max(data.1.a$windspd)
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(now=data.2.a, x1=Lag(data.2.a,1), x2=Lag(data.2.a,2))
#--------------------applying the ELM----------------------
#--------------------creating the elm model----------------
Elm_MOdel<-elmtrain(normalized_data$now~normalized_data$Lag.1+normalized_data$Lag.2,data=normalized_data, nhid = 10, actfun = "sig")
Elm_Pred<-predict(Elm_MOdel,newdata =normalized_data[3,c(2,3)])
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800) )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800) )
View(normalized_data)
View(normalized_data)
normalized_data<-normalized_data[-c(1,2),]
normalized_data
View(normalized_data)
View(normalized_data)
ce <- ConfidenceEstimatorNNErrors(Elm_MOdel, normalized_data)
ce <- create(ce, optimize = TRUE, Elm_Pred)
ce <- ConfidenceEstimatorNNErrors(Elm_MOdel, normalized_data)
ce <- create(ce, optimize = TRUE, Elm_Pred)
confidences <- estimate(ce, normalized_data, Elm_Pred)
ce<-ConfidenceEstimatorNNErrors(Elm_MOdel,normalized_data)
ce <- ConfidenceEstimatorNNErrors(Elm_Pred, normalized_data)
?`ConfidenceEstimator-class`
set.seed(100)
#artificial dataset
dataMatrix <- matrix(runif(10 * 200), 200, 10)
y <- (10 * sin(pi * dataMatrix[, 1] * dataMatrix[, 2]) + 20 *(dataMatrix[, 3] - 0.5)^2 + 10 * dataMatrix[, 4] + 5 * dataMatrix[,5]) + rnorm(200, 0, 0.1)
dataMatrix <- cbind(dataMatrix, y)
data <- Dataset(dataMatrix)
folds <- calculateFolds(data, 5, random = TRUE)
datasets <- splitByFolds(data, folds, 5)
trainingData <- normalize(datasets[[1]])
testData <- normalizeBy(datasets[[2]], trainingData)
#creating model
me <- ModelEvaluation()
rModel <- Regression(lm, predict)
fs <- TwinScan(averageError, min)
featureList <- selectFeatures(fs, trainingData, me, randomize = TRUE,rModel)
featureSet(trainingData) <- featureList
rModel <- learnFromDataset(rModel, trainingData)
featureSet(testData) <- featureList
predictions <- predictDataset(rModel, testData)
averageError(getResponses(testData), predictions)
realResponses <- unscaleVector(testData, getResponses(testData))
realPredictions <- unscaleVector(testData, predictions)
averageError(realResponses, realPredictions)
evaluateInCV(me, data, rModel, 5, random = FALSE, fs)
#confidence estimation
ce <- ConfidenceEstimatorNNErrors(rModel, trainingData)
predictionsTrainingData <- predictDataset(rModel, trainingData)
ce <- create(ce, optimize = TRUE, predictionsTrainingData)
confidences <- estimate(ce, testData, predictions)
evaluateConfidenceEstimates(getResponses(testData), predictions,confidences)
interval_widths <- confidences[, 3] - confidences[, 2]
top20 <- which(interval_widths <= sort(interval_widths)[length(interval_widths) *
+ 0.2])
top20Error <- averageError(getResponses(testData)[top20], predictions[top20])
top20Error
overallError <- averageError(getResponses(testData), predictions)
overallError
(1 - top20Error/overallError) * 100
plotConfidenceIntervals(ce, getResponses(testData), predictions,confidences[, 1])
??nn
install.packages(c("neuralnet", "NeuralNetTools"))
head(infert)
library(neuralnet)
nn=neuralnet(case~age+parity+induced+spontaneous,hidden=2,err.fct="ce",linear.output=F)
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,err.fct="ce",linear.output=F)
plot(nn)
nn
nn$weights
ci=confidence.interval(nn,alpha = 0.05)
ci$lower.ci
plot(ci$lower.ci)
ci$upper.ci
a=nn$weights
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,startweights = a,err.fct="ce",linear.output=F)
plot(nn)
l=ci$lower.ci
u=ci$upper.ci
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,startweights = l,err.fct="ce",linear.output=F)
plot(nn)
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,startweights = u,err.fct="ce",linear.output=F)
plot(nn)
nn=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,startweights = a,err.fct="ce",linear.output=F)
plot(nn)
nn.l=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,startweights = l,err.fct="ce",linear.output=F)
plot(nn.l)
nn.u=neuralnet(case~age+parity+induced+spontaneous,data=infert,hidden=2,startweights = u,err.fct="ce",linear.output=F)
plot(nn.u)
nn$result.matrix
nn$response
nn.l$response
nn.u$response
nn.u$weights
set.seed(100)
#artificial dataset
dataMatrix <- matrix(runif(10 * 200), 200, 10)
y <- (10 * sin(pi * dataMatrix[, 1] * dataMatrix[, 2]) + 20 *(dataMatrix[, 3] - 0.5)^2 + 10 * dataMatrix[, 4] + 5 * dataMatrix[,5]) + rnorm(200, 0, 0.1)
dataMatrix <- cbind(dataMatrix, y)
data <- Dataset(dataMatrix)
folds <- calculateFolds(data, 5, random = TRUE)
datasets <- splitByFolds(data, folds, 5)
trainingData <- normalize(datasets[[1]])
testData <- normalizeBy(datasets[[2]], trainingData)
#creating model
me <- ModelEvaluation()
rModel <- Regression(lm, predict)
fs <- TwinScan(averageError, min)
featureList <- selectFeatures(fs, trainingData, me, randomize = TRUE,rModel)
featureSet(trainingData) <- featureList
rModel <- learnFromDataset(rModel, trainingData)
featureSet(testData) <- featureList
predictions <- predictDataset(rModel, testData)
averageError(getResponses(testData), predictions)
realResponses <- unscaleVector(testData, getResponses(testData))
realPredictions <- unscaleVector(testData, predictions)
averageError(realResponses, realPredictions)
evaluateInCV(me, data, rModel, 5, random = FALSE, fs)
#confidence estimation
ce <- ConfidenceEstimatorNNErrors(rModel, trainingData)
predictionsTrainingData <- predictDataset(rModel, trainingData)
ce <- create(ce, optimize = TRUE, predictionsTrainingData)
confidences <- estimate(ce, testData, predictions)
evaluateConfidenceEstimates(getResponses(testData), predictions,confidences)
interval_widths <- confidences[, 3] - confidences[, 2]
top20 <- which(interval_widths <= sort(interval_widths)[length(interval_widths) *
+ 0.2])
top20Error <- averageError(getResponses(testData)[top20], predictions[top20])
top20Error
overallError <- averageError(getResponses(testData), predictions)
overallError
(1 - top20Error/overallError) * 100
plotConfidenceIntervals(ce, getResponses(testData), predictions,confidences[, 1])
#rm(list=ls)
library(elmNN)
library(ELMR)
library(quantmod) #for Lag
library(confReg)
library(e1071)
set.seed(1234)
data.1.a<- read.csv("D:/BTECHPROJECT/projectdataset/testing.csv",header=T);
###################################################
#(processed_data<-preProcess(data))
#class(data)
#preprocessing the data:
#data.1.b<-data.frame(data.1.a$windspd)
#data.1.c<-preProcess(data.1.b)
#data.1.d<-data.frame(data.1.c, x1=Lag(data.1.c,1), x2=Lag(data.1.c,2))
#(data.1.d)
####################################################
#data.2.a<-list()
#normalizing the data
max=max(data.1.a$windspd)
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(now=data.2.a, x1=Lag(data.2.a,1), x2=Lag(data.2.a,2))
#--------------------applying the ELM----------------------
#--------------------creating the elm model----------------
Elm_MOdel<-elmtrain(normalized_data$now~normalized_data$Lag.1+normalized_data$Lag.2,data=normalized_data, nhid = 10, actfun = "sig")
Elm_Pred<-predict(Elm_MOdel,newdata =normalized_data[3,c(2,3)])
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800) )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800) )
Prediction_Mean<-mean(Elm_Pred)
Prediction_STD.Deviation<-sd(Elm_Pred)
Prediction_Size<-length(Elm_Pred)
Prediction_Error<-qt(0.95,df=Prediction_Size-1)*Prediction_STD.Deviation/sqrt(Prediction_Size)
left<-Prediction_Mean- Prediction_Error
right<-Prediction_Mean+ Prediction_Error
prediction_intervals<-data.frame(upper=Elm_Pred+Prediction_Error,val=Elm_Pred,lower=Elm_Pred- Prediction_Error)
prediction_intervals
plot( data.2.a, type="l", col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$lower, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=1:1,cex=0.8)
?plot
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=2:1,cex=0.8)
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=3:1,cex=0.8)
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=2:1,cex=0.8)
plot( data.2.a, type="l", col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val, type = "l",col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$lower, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=2:1,cex=0.8)
plot( data.2.a, type="l", col="blue",lty=2,ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
plot(prediction_intervals$val, type = "l",col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
plot( data.2.a, type="l", col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val,lty=2, type = "l",col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$lower, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=1:2,cex=0.8)
plot( data.2.a, type="l", col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val,lty=1, type = "l",col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$lower, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=1:1,cex=0.8)
(Elm_Model)
(Elm_MOdel)
plot( data.2.a, type="l", col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hourly intervals",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val,lty=1, type = "l",col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hours",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$lower, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=1:1,cex=0.8)
plot( data.2.a, type="l", col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hours",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val,lty=1, type = "l",col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hours",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$lower, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=1:1,cex=0.8)
prediction_intervals
plot(prediction_intervals)
View(prediction_intervals)
View(prediction_intervals)
plot(prediction_intervals$upper)
plot(prediction_intervals$upper,type="l")
plot(prediction_intervals$upper, type="l", col="red")
par(new=TRUE)
plot(prediction_intervals$lower,type="l", col="blue")
plot(prediction_intervals$upper, type="l", col="red",ylim=c(0,1),xlab = "hours",ylab="normalised wind speed",main="ELM-INTERVAL")
par(new=TRUE)
plot(prediction_intervals$lower,type="l", col="blue")
plot(prediction_intervals$upper, type="l", col="red",ylim=c(0,1),xlab = "hours",ylab="normalised wind speed",main="ELM-INTERVAL")
par(new=TRUE)
plot(prediction_intervals$lower,type="l", col="blue",ylim=c(0,1),xlab = "hours",ylab="normalised wind speed",main="ELM")
prediction_intervals<-data.frame(upper=Elm_Pred+0.8*Prediction_Error,val=Elm_Pred,lower=Elm_Pred- 0.2*Prediction_Error)
View(prediction_intervals)
prediction_intervals<-data.frame(upper=Elm_Pred+Prediction_Error,val=Elm_Pred,lower=Elm_Pred-Prediction_Error)
?qt
print.elmNN(Elm_MOdel)
Elm_Pred<-predict(Elm_MOdel,newdata =normalized_data)
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800) )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800) )
Prediction_Mean<-mean(Elm_Pred)
Prediction_STD.Deviation<-sd(Elm_Pred)
Prediction_Size<-length(Elm_Pred)
Prediction_Error<-qt(0.95,df=Prediction_Size-1)*Prediction_STD.Deviation/sqrt(Prediction_Size)
left<-Prediction_Mean- Prediction_Error
right<-Prediction_Mean+ Prediction_Error
prediction_intervals<-data.frame(upper=Elm_Pred+Prediction_Error,val=Elm_Pred,lower=Elm_Pred-Prediction_Error)
prediction_intervals
plot( data.2.a, type="l", col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hours",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
par(new=TRUE)
plot(prediction_intervals$val,lty=1, type = "l",col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hours",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=1:1,cex=0.8)
plot(prediction_intervals$upper, type="l", col="red",ylim=c(0,1),xlab = "hours",ylab="normalised wind speed",main="ELM-INTERVAL")
par(new=TRUE)
plot(prediction_intervals$lower,type="l", col="blue",ylim=c(0,1),xlab = "hours",ylab="normalised wind speed",main="ELM")
View(data.1.a)
View(data.1.a)
View(normalized_data)
plot( data.2.a, type="l", col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744), xlab = "hours",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$upper, type = "l",col="red",ylim = c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
par(new=TRUE)
plot(prediction_intervals$val,lty=1, type = "l",col="red",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744),xlab = "hours",ylab="normalised wind speed",main="ELM")
par(new=TRUE)
#plot(prediction_intervals$lower, type = "l",col="blue",ylim =c(min(prediction_intervals$lower),max(prediction_intervals$upper)),xlim = c(0,744))
legend(600,0.8,legend=c("Target","Actual"),col=c("blue","red"),lty=1:1,cex=0.8)
View(Elm_Pred)
View(normalized_data)
normalized_data<-normalized_data[-c(1,2),]
Elm_MOdel<-elmtrain(normalized_data$now~normalized_data$Lag.1+normalized_data$Lag.2,data=normalized_data, nhid = 10, actfun = "sig")
(Elm_MOdel)
#---------------------Predicting the values----------------
Elm_Pred<-predict(Elm_MOdel,newdata =normalized_data)
#----------
#plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800) )
#par(new=TRUE)
#plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800) )
#------------
#--------------Statistics Calculation-----------
Prediction_Mean<-mean(Elm_Pred)
Prediction_STD.Deviation<-sd(Elm_Pred)
Prediction_Size<-length(Elm_Pred)
Prediction_Error<-qt(0.95,df=Prediction_Size-1)*Prediction_STD.Deviation/sqrt(Prediction_Size)
left<-Prediction_Mean- Prediction_Error
right<-Prediction_Mean+ Prediction_Error
#-----------------------------------------
prediction_intervals<-data.frame(upper=Elm_Pred+Prediction_Error,val=Elm_Pred,lower=Elm_Pred-Prediction_Error)
(prediction_intervals)
#----------------plotting the PI-----------------------
plot(prediction_intervals$upper, type="l", col="red",ylim=c(0,1),xlab = "hours",ylab="normalised wind speed",main="ELM-INTERVAL")
par(new=TRUE)
plot(prediction_intervals$lower,type="l", col="blue",ylim=c(0,1),xlab = "hours",ylab="normalised wind speed",main="ELM")
#--------------------creating the elm model----------------
Elm_MOdel<-elmtrain(normalized_data$now~normalized_data$Lag.1+normalized_data$Lag.2,data=normalized_data, nhid = 10, actfun = "sig")
(Elm_MOdel)
#---------------------Predicting the values----------------
Elm_Pred<-predict(Elm_MOdel,newdata =normalized_data)
#----------
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800) )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800) )
#------------
legend(600,0.9,legend=c("target","actual"),col=c("blue","red"),lwd=2,lty = 1:1,cex=0.8)
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800) )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800) )
legend(600,0.9,legend=c("target","actual"),col=c("blue","red"),lwd=2,lty = 1:1,cex=0.8)
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800),xlab = "hours",ylab="normalized Windspeed" )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800) )
legend(600,0.9,legend=c("target","actual"),col=c("blue","red"),lwd=2,lty = 1:1,cex=0.8)
#----------
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800),xlab = "hours",ylab="normalized Windspeed" )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800),xlab = "hours",ylab="normalized Windspeed"  )
legend(600,0.9,legend=c("target","actual"),col=c("blue","red"),lwd=2,lty = 1:1,cex=0.8)
#rm(list=ls)
library(elmNN)
#library(ELMR)
library(quantmod) #for Lag
#library(confReg)
#library(e1071)
#set.seed(1234)
data.1.a<- read.csv("D:/BTECHPROJECT/projectdataset/testing.csv",header=T);
#####################PreProcessing the data##############################
#(processed_data<-preProcess(data))
#class(data)
#preprocessing the data:
#data.1.b<-data.frame(data.1.a$windspd)
#data.1.c<-preProcess(data.1.b)
#data.1.d<-data.frame(data.1.c, x1=Lag(data.1.c,1), x2=Lag(data.1.c,2))
#(data.1.d)
####################################################
#data.2.a<-list()
#---------------normalizing the data-----------------
max=max(data.1.a$windspd)
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(now=data.2.a, x1=Lag(data.2.a,1), x2=Lag(data.2.a,2))
#--------------------applying the ELM----------------------
#--------------------creating the elm model----------------
Elm_MOdel<-elmtrain(normalized_data$now~normalized_data$Lag.1+normalized_data$Lag.2,data=normalized_data, nhid = 10, actfun = "sig")
(Elm_MOdel)
#---------------------Predicting the values----------------
Elm_Pred<-predict(Elm_MOdel,newdata =normalized_data)
#----------
plot( data.2.a, type="l", col="yellow",ylim = c(0,1),xlim=c(0,800),xlab = "hours",ylab="normalized Windspeed" )
par(new=TRUE)
plot(Elm_Pred, type="l", col="blue",ylim = c(0,1),xlim = c(0,800),xlab = "hours",ylab="normalized Windspeed"  )
legend(600,0.9,legend=c("target","actual"),col=c("blue","red"),lwd=2,lty = 1:1,cex=0.8)
#------------
#--------------Statistics Calculation-----------
Prediction_Mean<-mean(Elm_Pred)
Prediction_STD.Deviation<-sd(Elm_Pred)
Prediction_Size<-length(Elm_Pred)
Prediction_Error<-qt(0.95,df=Prediction_Size-1)*Prediction_STD.Deviation/sqrt(Prediction_Size)
left<-Prediction_Mean- Prediction_Error
right<-Prediction_Mean+ Prediction_Error
#-----------------------------------------
prediction_intervals<-data.frame(upper=Elm_Pred+Prediction_Error,val=Elm_Pred,lower=Elm_Pred-Prediction_Error)
(prediction_intervals)
#----------------plotting the PI-----------------------
plot(prediction_intervals$upper, type="l", col="red",ylim=c(0,1),xlab = "hours",ylab="normalised wind speed",main="ELM-INTERVAL")
par(new=TRUE)
plot(prediction_intervals$lower,type="l", col="blue",ylim=c(0,1),xlab = "hours",ylab="normalised wind speed",main="ELM")
