print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(trainingData[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
#print(final.output)
Ux<-add(final.output[1])
Lx<-add(final.output[2])
#plot(final.output[], xlim = c(0,2),ylim = c(0,2))
#par(new=T)
}
for (j in 3:10) {
#########################################################################
print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(trainingData[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
#print(final.output)
Ux[j]<-add(final.output[1])
Lx[j]<-add(final.output[2])
#plot(final.output[], xlim = c(0,2),ylim = c(0,2))
#par(new=T)
}
for (j in 3:10) {
#########################################################################
print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(trainingData[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
#print(final.output)
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
#plot(final.output[], xlim = c(0,2),ylim = c(0,2))
#par(new=T)
}
Ux
Lx
plot Ux
plot(Ux,ylim =c(0,1) )
plot(Ux,ylim = c(0,1))
par(new=T)
plot(Lx,ylim=c(0,1),type="l")
Ux
summary(Ux)
i
i=2
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
WMat_hidden.output<-matrix(population_hidden.output[[i]],nrow = 10,ncol = 2, byrow = TRUE)
WMat_hidden.output<-matrix
WMat_hidden.output
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
#print(WMat_input.hidden[[1,10]])   #testing if the matrix values are accessible or  not
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
print(WMat_input.hidden[[1,10]])   #testing if the matrix values are accessible or  not
print(WMat_input.hidden[[1,]])   #testing if the matrix values are accessible or  not
print(WMat_input.hidden)   #testing if the matrix values are accessible or  not
WMat_hidden.output<-matrix(population_hidden.output[[i]],nrow = 10,ncol = 2, byrow = TRUE)
print(WMat_hidden.output)
#put a loop here to itereate the chromosomes
for (i in 1:10) {
#############################################################################
#generating the input-hidden layer weight matrix
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
#print(WMat_input.hidden[[1,10]])   #testing if the matrix values are accessible or  not
#generating the hidden-output weight matrix
WMat_hidden.output<-matrix(population_hidden.output[[i]],nrow = 10,ncol = 2, byrow = TRUE)
print(WMat_hidden.output)
################## to itereate through the rows in the training data set
for (j in 3:10) {
#########################################################################
print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(trainingData[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
print(final.output)
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
#plot(final.output[], xlim = c(0,2),ylim = c(0,2))
#par(new=T)
}
}
plot(Ux,ylim = c(0,1))
par(new=T)
plot(Lx,ylim=c(0,1),type="l")
#random generation of input-hidden layer weight matrix population
population_input.hidden<- list()
for (i in 1:10) {
population_input.hidden[[i]]<-rnorm(30)
}
Tangent_Activation <- function(a){
(exp(a)-exp(-a))/(exp(a)+exp(-a));
}##is wrong it will be e^x-e^-x/e^x+e^-x
Sigmoidal_Activation <- function(a,b=1){
y <-((1+exp(-b*a))^(-1));
}
Ux<-list()
Lx<-list()
population_input.hidden<- list()
for (i in 1:10) {
population_input.hidden[[i]]<-rnorm(30)
}
population_hidden.output<- list()
PICP(windspeed,Ux,Lx)
}
NMPIW(Ux,Lx)
for (i in 1:10) {
population_hidden.output[[i]]<-rnorm(20)
}
for (i in 1:10) {
#############################################################################
#generating the input-hidden layer weight matrix
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
#print(WMat_input.hidden[[1,10]])   #testing if the matrix values are accessible or  not
#generating the hidden-output weight matrix
WMat_hidden.output<-matrix(population_hidden.output[[i]],nrow = 10,ncol = 2, byrow = TRUE)
print(WMat_hidden.output)
################## to itereate through the rows in the training data set
for (j in 3:10) {
#########################################################################
print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(trainingData[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
print(final.output)
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
#plot(final.output[], xlim = c(0,2),ylim = c(0,2))
#par(new=T)
}
}
hidden.input<-as.matrix(trainingData[j,]) %*% WMat_input.hidden
hidden.input
hidden.output
hidden.output<-Tangent_Activation(hidden.input)
hidden.output
output.sinput<-hidden.output %*% WMat_hidden.output
output.sinput
final.output<-Sigmoidal_Activation(output.sinput)
final.output
rm(list = ls())
library(quantmod) #for Lag
data.1.a<- read.csv("D:/BTECHPROJECT/projectdataset/testing.csv",header=T);
#---------------normalizing the data-----------------
max=max(data.1.a$windspd)
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(now=data.2.a, x1=Lag(data.2.a,1), x2=Lag(data.2.a,2))
View(normalized_data)
normalized_data<-normalized_data[-c(1,2)]
normalized_data
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(now=data.2.a, x1=Lag(data.2.a,1), x2=Lag(data.2.a,2))
normalized_data<-normalized_data[-c(1,2),]
Tangent_Activation <- function(a){
(exp(a)-exp(-a))/(exp(a)+exp(-a));
}##is wrong it will be e^x-e^-x/e^x+e^-x
Sigmoidal_Activation <- function(a,b=1){
y <-((1+exp(-b*a))^(-1));
}
Tangent_Activation(99)
Tangent_Activation(0.3124124)
Tangent_Activation(0.0009999)
Tangent_Activation(0.6)
Tangent_Activation(0.908)
Tangent_Activation(9)
Tangent_Activation(7)
Tangent_Activation(8)
#hyperbolic tangential function
Tangent_Activation <- function(a){
(exp(a)-exp(-a))/(exp(a)+exp(-a));
}##is wrong it will be e^x-e^-x/e^x+e^-x
#sigmoidal function
#parameters a= the input b=steepness parameter, default=1
Sigmoidal_Activation <- function(a,b=1){
y <-((1+exp(-b*a))^(-1));
}
#First order derivative of tangential function:
#FOD_Tangent_Activation <- function(a) y <- 2 * Tangent_Activation(a) * (1- Tangent_Activation(a))
#First order Derivative of Sigmoidal fucntion:
#FOD_Sigmoidal_Activation<- fiunction(a,b=1) y<-(2* Sigmoidal_Activation(a,b) * (1-Sigmoidal_Activation(a,b)))
#defining upper limits
Ux<-list()
#defining lower limits
Lx<-list()
#random generation of input-hidden layer weight matrix population
population_input.hidden<- list()
for (i in 1:10) {
population_input.hidden[[i]]<-rnorm(30)
}
#random generation of hidden-output layer weight matrix population
population_hidden.output<- list()
for (i in 1:10) {
population_hidden.output[[i]]<-rnorm(20)
}
#### code under consturction#############################################
#put a loop here to itereate the chromosomes
for (i in 1:10) {
#############################################################################
#generating the input-hidden layer weight matrix
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
#print(WMat_input.hidden[[1,10]])   #testing if the matrix values are accessible or  not
#generating the hidden-output weight matrix
WMat_hidden.output<-matrix(population_hidden.output[[i]],nrow = 10,ncol = 2, byrow = TRUE)
print(WMat_hidden.output)
################## to itereate through the rows in the training data set
for (j in 3:10) {
#########################################################################
print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(normalized_data[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
print(final.output)
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
#plot(final.output[], xlim = c(0,2),ylim = c(0,2))
#par(new=T)
Tangent_Activation(8)
}
}
#### code under consturction#############################################
#put a loop here to itereate the chromosomes
for (i in 1:10) {
#############################################################################
#generating the input-hidden layer weight matrix
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
#print(WMat_input.hidden[[1,10]])   #testing if the matrix values are accessible or  not
#generating the hidden-output weight matrix
WMat_hidden.output<-matrix(population_hidden.output[[i]],nrow = 10,ncol = 2, byrow = TRUE)
print(WMat_hidden.output)
################## to itereate through the rows in the training data set
for (j in 3:10) {
#########################################################################
#print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(normalized_data[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
print(final.output)
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
#plot(final.output[], xlim = c(0,2),ylim = c(0,2))
#par(new=T)
}
}
#### code under consturction#############################################
#put a loop here to itereate the chromosomes
for (i in 1:10) {
#############################################################################
#generating the input-hidden layer weight matrix
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
#print(WMat_input.hidden[[1,10]])   #testing if the matrix values are accessible or  not
#generating the hidden-output weight matrix
WMat_hidden.output<-matrix(population_hidden.output[[i]],nrow = 10,ncol = 2, byrow = TRUE)
print(WMat_hidden.output)
################## to itereate through the rows in the training data set
for (j in 3:744) {
#########################################################################
#print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(normalized_data[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
print(final.output)
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
#plot(final.output[], xlim = c(0,2),ylim = c(0,2))
#par(new=T)
}
}
Ux
for (i in 1:10) {
#############################################################################
#generating the input-hidden layer weight matrix
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
#print(WMat_input.hidden[[1,10]])   #testing if the matrix values are accessible or  not
#generating the hidden-output weight matrix
WMat_hidden.output<-matrix(population_hidden.output[[i]],nrow = 10,ncol = 2, byrow = TRUE)
print(WMat_hidden.output)
################## to itereate through the rows in the training data set
for (j in 3:742) {
#########################################################################
#print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(normalized_data[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
print(final.output)
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
plot(final.output, xlim = c(0,2),ylim = c(0,2))
par(new=T)
}
}
data.1.a<- read.csv("D:/BTECHPROJECT/projectdataset/testing.csv",header=T);
#---------------normalizing the data-----------------
max=max(data.1.a$windspd)
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(x1=Lag(data.2.a,1), x2=Lag(data.2.a,2), x3=Lag(data.2.a,3))
library(quantmod) #for Lag
data.1.a<- read.csv("D:/BTECHPROJECT/projectdataset/testing.csv",header=T);
#---------------normalizing the data-----------------
max=max(data.1.a$windspd)
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(x1=Lag(data.2.a,1), x2=Lag(data.2.a,2), x3=Lag(data.2.a,3))
normalized_data<-normalized_data(-c(1,2,3))
normalized_data<<-normalized_data<(-c(1,2,3))
normalized_data<-data.frame(x1=Lag(data.2.a,1), x2=Lag(data.2.a,2), x3=Lag(data.2.a,3))
normalized_data<-normalized_data(-c(1,2,3))
normalized_data<-data.frame(x1=Lag(data.2.a,1), x2=Lag(data.2.a,2), x3=Lag(data.2.a,3))
normalized_data<-normalized_data(-c(1,2,3))
normalized_data<-data.frame(x1=Lag(data.2.a,1), x2=Lag(data.2.a,2), x3=Lag(data.2.a,3))
normalized_data<-normalized_data(-c(1,2,3))
normalized_data<-normalized_data[-c(1,2,3)]
View(normalized_data)
normalized_data<-data.frame(x1=Lag(data.2.a,1), x2=Lag(data.2.a,2), x3=Lag(data.2.a,3))
normalized_data<-normalized_data[-c(1,2,3),]
(normalized_data)
View(normalized_data)
(NOrmal_data)
NOrmal_data<-normalized_data
(NOrmal_data)
head(NOrmal_data)
normalized_data<-data.frame(x1=Lag(data.2.a,1), x2=Lag(data.2.a,2), x3=Lag(data.2.a,3))
(head(normalized_data))
normalized_data<-normalized_data[-c(1,2,3),]
(head(normalized_data))
normalized_data[1,]
(tail(normalized_data))
normalized_data[744,]
normalized_data[743,]
normalized_data[742,]
normalized_data[741,]
library(quantmod) #for Lag
data.1.a<- read.csv("D:/BTECHPROJECT/projectdataset/testing.csv",header=T);
#---------------normalizing the data-----------------
max=max(data.1.a$windspd)
min=min(data.1.a$windspd)
#--------------------normalization-------------------------
data.2.a<-(data.1.a$windspd-min)/(max-min)
normalized_data<-data.frame(x1=Lag(data.2.a,1), x2=Lag(data.2.a,2), x3=Lag(data.2.a,3))
#normalized_data<-normalized_data[-c(1,2,3),]
normalized_data<-normalized_data[4:744]
View(normalized_data)
normalized_data<-normalized_data[4:744]
normalized_data<-normalized_data[4:744,]
normalized_data[1,]
normalized_data[744,]
normalized_data[740,]
normalized_data[741,]
normalized_data[742,]
length(data.2.a)
length(normalized_data)
nrows(normalized_data)
data.3.a<-data.2.a[4:744]
data.3.a<-data.2.a[4:744]
(data.3.a)
data.3.a<-data.2.a[1:741]
View(normalized_data)
View(normalized_data)
data.3.a<-data.2.a[4:744]
(data.3.a)
(data.3.a)
#random generation of input-hidden layer weight matrix population
population_input.hidden<- list()
for (i in 1:20) {
population_input.hidden[[i]]<-rnorm(30)
}
#random generation of hidden-output layer weight matrix population
population_hidden.output<- list()
for (i in 1:20) {
population_hidden.output[[i]]<-rnorm(20)
}
for (i in 1:20) {
#############################################################################
#generating the input-hidden layer weight matrix
WMat_input.hidden<-matrix(population_input.hidden[[i]],nrow = 3,ncol = 10, byrow = TRUE)
#print(WMat_input.hidden[[1,10]])   #testing if the matrix values are accessible or  not
#generating the hidden-output weight matrix
WMat_hidden.output<-matrix(population_hidden.output[[i]],nrow = 10,ncol = 2, byrow = TRUE)
print(WMat_hidden.output)
################## to itereate through the rows in the training data set
for (j in 1:741) {
#########################################################################
#print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(normalized_data[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
print(final.output)
#if(data[]<final.output[1] & normalized_data[]>final.output[2])
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
#if(normalized_data[j,1]>Ux[j]])
plot(final.output, xlim = c(0,2),ylim = c(0,2))
par(new=T)
}
}
picp<-0
if(data.3.a<Ux[j] && data.3.a[j]>Lx[j] ) picp<-picp+1
picp
j
final.output[j]
for (j in 1:741) {
#########################################################################
#print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(normalized_data[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
print(final.output)
#if(data[]<final.output[1] & normalized_data[]>final.output[2])
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
picp<-0
if(data.3.a<Ux[j] && data.3.a[j]>Lx[j] ) picp<-picp+1
plot(final.output, xlim = c(0,2),ylim = c(0,2))
par(new=T)
}
picp
?
ds
;
if(data.3.a<Ux[j] && data.3.a[j]>Lx[j] ){ picp<-picp+1}
picp<-0
for (j in 1:200) {
#########################################################################
#print(trainingData[j,])
#input for the hidden layer nodes calculated
hidden.input<-as.matrix(normalized_data[j,]) %*% WMat_input.hidden
#activation fnction is applied to the input
hidden.output<-Tangent_Activation(hidden.input)
#multiplying the hidden layer output with the hidden-output weight matrix
#to generate the input to the output layer nodes
output.sinput<-hidden.output %*% WMat_hidden.output
#applying activation function of the output layer:
final.output<-Sigmoidal_Activation(output.sinput)
print(final.output)
#if(data[]<final.output[1] & normalized_data[]>final.output[2])
Ux[j]<-(final.output[1])
Lx[j]<-(final.output[2])
if(data.3.a<Ux[j] && data.3.a[j]>Lx[j] ){ picp<-picp+1}
plot(final.output, xlim = c(0,2),ylim = c(0,2))
par(new=T)
}
picp
